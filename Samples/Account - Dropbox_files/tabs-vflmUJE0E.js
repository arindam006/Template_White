// Generated by CoffeeScript 1.3.3
var Tabs;

Tabs = (function() {

  Tabs.get_tabs = function(id) {
    return $j("#" + id).controller();
  };

  function Tabs(container) {
    var full_width, tab, tabs, total_width, width_to_add;
    this.container = container;
    this.container.controller(this);
    this._listen();
    $j(window).trigger("hashchange");
    tabs = this.container.find(".tab-tab");
    full_width = this.container.innerWidth();
    total_width = $u.reduce((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        tab = tabs[_i];
        _results.push($j(tab).outerWidth());
      }
      return _results;
    })(), function(x, y) {
      return x + y;
    });
    if (total_width > full_width * .8) {
      width_to_add = (full_width - total_width) / tabs.length + 1;
      tabs.css("width", "+=" + width_to_add);
    }
  }

  Tabs.prototype._listen = function() {
    var _this = this;
    $j(window).bind("hashchange", function() {
      var hash;
      hash = window.location.hash.split("#")[1];
      return _this._show_tab(_this.container.find("[data-hash=" + hash + "]"));
    });
    return this.container.find(".tab-tab").click(function(e) {
      var tab;
      tab = $j(e.target);
      window.location.hash = tab.data("hash") || "";
      return _this._show_tab($j(e.target));
    });
  };

  Tabs.prototype._show_tab = function(tab) {
    if (!tab.length) {
      return;
    }
    this.container.find(".tab-tab").removeClass("selected");
    this.container.find(".tab-content").removeClass("selected");
    tab.addClass("selected");
    return this.container.find("#" + (tab.data('id'))).addClass("selected");
  };

  Tabs.prototype.show_tab = function(id) {
    return this._show_tab(this.container.find(".tab-tab[data-id=" + id + "]"));
  };

  return Tabs;

})();
