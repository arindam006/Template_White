// Generated by CoffeeScript 1.3.3
var BubbleSelect, DBSelect,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DBSelect = (function() {

  DBSelect.prototype.background_image = "url('/static/images/downarrow_gray.png')";

  function DBSelect(select_el) {
    var _this = this;
    this.select_el = $j(select_el);
    this.select_el.on('mousedown', function() {
      _this.toggle_dropdown();
      if ($j.browser.msie_version_at_most(8)) {
        setTimeout((function() {
          return _this.select_el.blur();
        }), 0);
      }
      return false;
    });
    this.select_el.on('focus', function() {
      if ($j.browser.msie_version_at_most(8)) {
        return false;
      }
      _this.show_dropdown();
      return false;
    });
    this.select_el.on('blur', function() {
      if ($j.browser.msie_version_at_most(8)) {
        return false;
      }
      _this.hide_dropdown();
      return false;
    });
    this.select_el.click(function(e) {
      return false;
    });
    $j(document).click(function(e) {
      return _this.hide_dropdown();
    });
    if (!$j.browser.msie_version_at_most(8)) {
      this.select_el.css("background-image", this.background_image);
    }
  }

  DBSelect.prototype.on_option_click = function(e) {
    var option, val;
    option = $j(e.target);
    val = option.data("val");
    if (option.hasClass("disabled")) {
      this.select_el.trigger("disabled-option-clicked", val);
      return false;
    }
    return this.select_el.val(val).change();
  };

  DBSelect.prototype.toggle_dropdown = function() {
    if (this.dropdown != null) {
      return this.hide_dropdown();
    } else {
      return this.show_dropdown();
    }
  };

  DBSelect.prototype.show_dropdown = function() {
    var li, option, ul, _i, _len, _ref;
    if (this.dropdown) {
      return;
    }
    this.select_el.addClass("dropdown");
    ul = $j("<ul class='db-select-list' />");
    _ref = this.select_el.find("option");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      option = _ref[_i];
      option = $j(option);
      li = $j("<li/>").text(option.data("dropdown-label") || option.text());
      li.data("val", option.val());
      if (option.hasClass("disabled")) {
        li.addClass("disabled");
      }
      li.click(this.on_option_click.bind(this));
      ul.append(li);
    }
    return this._generate_dropdown_from_ul(ul);
  };

  DBSelect.prototype._generate_dropdown_from_ul = function(ul) {
    var offset;
    this.dropdown = ul.appendTo(this.select_el.parent());
    this.dropdown.width(this.select_el.innerWidth());
    offset = this.select_el.offset();
    offset.top += this.select_el.innerHeight() + 1;
    return this.dropdown.offset(offset);
  };

  DBSelect.prototype.hide_dropdown = function() {
    if (!this.dropdown) {
      return;
    }
    this.select_el.removeClass("dropdown");
    this.dropdown.remove();
    return delete this.dropdown;
  };

  DBSelect.prototype.enable = function(val) {
    var option;
    option = this.select_el.find("option[value=" + val + "]");
    return option.removeClass("disabled");
  };

  DBSelect.prototype.disable = function(val) {
    var option;
    option = this.select_el.find("option[value=" + val + "]");
    return option.addClass("disabled");
  };

  return DBSelect;

})();

BubbleSelect = (function(_super) {

  __extends(BubbleSelect, _super);

  BubbleSelect.prototype.background_image = "url('/static/images/downarrow.png')";

  function BubbleSelect(select_el) {
    this.on_change = __bind(this.on_change, this);
    BubbleSelect.__super__.constructor.call(this, select_el);
    if (!$j.browser.msie_version_at_most(8)) {
      this.ARROW_OFFSET = $j.browser.mozilla ? 19 : 11;
      this.select_el.change(this.on_change);
      this.on_change();
    }
  }

  BubbleSelect.prototype.on_change = function() {
    var bg_position, bg_x, bg_y, selected, text_width;
    selected = this.select_el.find("option:selected");
    text_width = Util.text_width(selected.text(), this.select_el.css("font-size"));
    bg_position = this.select_el.css("backgroundPosition");
    bg_y = bg_position.split(' ')[1];
    bg_x = (text_width + this.ARROW_OFFSET) + "px";
    this.select_el.css("backgroundPosition", bg_x + " " + bg_y);
    return this.select_el.width(text_width + 40);
  };

  BubbleSelect.prototype._generate_dropdown_from_ul = function(ul) {
    var arrow, arrow_tip_diff, bubble_arrow_left, left_diff, offset, select_arrow_left;
    if ($j.browser.msie_version_at_most(8)) {
      BubbleSelect.__super__._generate_dropdown_from_ul.call(this, ul);
      return;
    }
    this.dropdown = $j("<div class='chat-bubble db-select-bubble' />").appendTo($j("body"));
    this.dropdown.append(ul);
    this.dropdown.append($j("<div class='chat-bubble-arrow-border' />"));
    arrow = $j("<div class='chat-bubble-arrow' />").appendTo(this.dropdown);
    offset = this.select_el.offset();
    offset.top += this.select_el.innerHeight() + 5;
    select_arrow_left = parseInt(this.select_el.css("backgroundPosition"));
    bubble_arrow_left = this.dropdown.width() - parseInt(arrow.css("right")) - arrow.outerWidth();
    left_diff = select_arrow_left - bubble_arrow_left;
    arrow_tip_diff = (arrow.outerWidth() - 8) / 2;
    offset.left += left_diff - arrow_tip_diff;
    return this.dropdown.offset(offset);
  };

  return BubbleSelect;

})(DBSelect);
